services:
  # app:
  #   container_name: vip_bot
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - postgres
  #   restart: "unless-stopped"
  #   volumes:
  #     - bot-data:/app
  #   profiles:
  #     - production
  #   networks:
  #     - vip_network_bot_reporter


  postgres:
    container_name: vip_bot_postgres
    image: postgres:17-alpine
    env_file: .env
    restart: "unless-stopped"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:5433:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "30m"
        max-file: "5"
        compress: "true"
    profiles:
      - production
    networks:
      - vip_network_bot_reporter
    volumes:
      - "postgres-data:/var/lib/postgresql/data"

  pgadmin:
    container_name: vip_bot_pgadmin
    image: dpage/pgadmin4:9
    restart: "unless-stopped"
    env_file: .env
    ports:
      - "127.0.0.1:8081:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - "pgadmin:/var/lib/pgadmin"
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "30m"
        max-file: "5"
    profiles:
      - production
    networks:
      - vip_network_bot_reporter

  redis:
    image: redis:8.2.0
    container_name: vip_bot_redis
    env_file: 
      - .env
    volumes:
      - redis-data:/data
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    profiles:
      - production
    networks:
      - vip_network_bot_reporter

  db-migrations:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    command: poetry run alembic upgrade head
    profiles:
      - migrations
    networks:
      - vip_network_bot_reporter

networks:
  vip_network_bot_reporter:
    name: vip_network_bot_reporter

volumes:
  postgres-data:
  pgadmin:
  bot-data:
  redis-data: